#!/usr/bin/env python
# Workflow_Cons_PSMC_Recal 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See http://wiki.dnanexus.com/Developer-Portal for documentation and
# tutorials on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

import os
import dxpy

@dxpy.entry_point('main')
def main(first_consensus, second_consensus, window, outfile_name):

    # The following line(s) initialize your data object inputs on the platform
    # into dxpy.DXDataObject instances that you can start using immediately.

    first_consensus = dxpy.DXFile(first_consensus)
    second_consensus = dxpy.DXFile(second_consensus)

    # The following line(s) download your file inputs to the local file system
    # using variable names for the filenames.

    dxpy.download_dxfile(first_consensus.get_id(), "first_consensus")
    dxpy.download_dxfile(second_consensus.get_id(), "second_consensus")

    # Fill in your application code here.
    input_to_facon = {"file1"="first_consensus", "file2"="second_consensus", "skip"=window, "outname"="cons"}
    dxfacon = dxpy.DXApplet(name="PSMCFa_Conv_20")
    dxjob1 = dxfacon.run(input_to_facon)

    # The following line(s) use the Python bindings to upload your file outputs
    # after you have created them on the local file system.  It assumes that you
    # have used the output field name for the filename for each output, but you
    # can change that behavior to suit your needs.

    outpsmcfile = dxpy.upload_local_file("outpsmcfile");

    # The following line fills in some basic dummy output and assumes
    # that you have created variables to represent your output with
    # the same name as your output fields.

    output = {}
    output["outpsmcfile"] = dxpy.dxlink(outpsmcfile)

    return output

dxpy.run()
